https://www.atlassian.com/git/tutorial/undoing-changes
sillabus(synopsis)

http://webcache.googleusercontent.com/search?q=cache:8f-ycW0OMMEJ:stackoverflow.com/questions/1514054/how-do-i-delete-a-local-repository-in-git+&cd=1&hl=en&ct=clnk&gl=us
How to remove local git.

http://stackoverflow.com/questions/4114095/revert-to-a-previous-git-commit
http://stackoverflow.com/questions/927358/undo-the-last-git-commit
revert to last commit.

1git rm file.txt removes the file from the repo but also deletes it from the local file system.
2To remove the file from the repo and not delete it from the local file system use:
git rm --cached file.txt

I like git stash save -u because you can undo them all with git stash pop

remove untracked file options
http://git-scm.com/docs/git-clean

Lots of complicated and dangerous answers here, but it's actually easy:

git revert --no-commit 0766c053..HEAD
git commit
This will revert everything from the HEAD back to the commit hash, meaning it will recreate that commit state in the working tree as if every commit since had been walked back. You can then commit the current tree, and it will create a brand new commit essentially equivalent to the commit you "reverted" to.

(The --no-commit flag lets git revert all the commits at once- otherwise you'll be prompted for a message for each commit in the range, littering your history with unnecessary new commits.)

This is a safe and easy way to rollback to a previous state. No history is destroyed, so it can be used for commits that have already been made public.